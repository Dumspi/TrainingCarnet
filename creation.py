import streamlit as st
import pandas as pd
from datetime import date

# ---------- PARAM√àTRES ----------

PHASES = [
    ("Pr√©pa 1", date(2025, 9, 1), date(2025, 12, 31), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition janvier", date(2026, 1, 1), date(2026, 1, 31), "PPG/Technique", "Technique"),
    ("Comp√©tition f√©vrier", date(2026, 2, 1), date(2026, 2, 28), "Technique", "Technique"),
    ("Pr√©pa 2", date(2026, 3, 1), date(2026, 4, 15), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition avril-mai", date(2026, 4, 16), date(2026, 5, 15), "PPG/Technique", "Technique"),
    ("Comp√©tition mai-juillet", date(2026, 5, 16), date(2026, 7, 15), "Technique", "Technique"),
]

JOURS = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi"]

EXOS_MUSCU = ["√âpaul√©", "Arrach√©", "Soulev√© de terre", "Squat", "Pull over"]
EXOS_PREPA = ["M√©decine ball", "Passage de haies", "S√©rie de m√©decine ball JB", "Gainage"]
EXOS_TECH = ["Lancers de balles", "Courses d‚Äô√©lan", "Point technique pr√©cis", "Lancers de javelots"]

TESTS_MAX_MUSCU = EXOS_MUSCU
TESTS_MAX_JAVELOT = [
    "Saut en longueur sans √©lan",
    "√âjection lancer de poids 4kg avant",
    "√âjection lancer de poids 4kg arri√®re",
    "Lancer m√©decine ball 4kg"
]
TEST_SAUT_HAUTEUR = "Saut en hauteur sans √©lan"

# ---------- FONCTIONS ----------

def get_phase(current_date):
    for phase, start, end, mardi, jeudi in PHASES:
        if start <= current_date <= end:
            return phase, mardi, jeudi
    return "", "PPG/Technique", "PPG/Technique"  # Valeurs par d√©faut

# ---------- INTERFACE ----------

st.set_page_config(page_title="Carnet Javelot", layout="centered")
st.title("üìò Carnet de suivi - Javelot")

selected_date = st.date_input("üìÖ Choisis la date :", date.today())

if isinstance(selected_date, date):
    weekday = selected_date.weekday()
else:
    st.error("La date s√©lectionn√©e est invalide.")
    st.stop()

if weekday > 4:
    st.warning("Aucune s√©ance pr√©vue le week-end.")
    st.stop()

jour = JOURS[weekday]
phase, mardi_type, jeudi_type = get_phase(selected_date)

if jour == "Lundi":
    type_seance = "Muscu"
elif jour == "Mardi":
    type_seance = mardi_type
elif jour == "Mercredi":
    type_seance = "Gym/Muscu/Mobilit√©"
elif jour == "Jeudi":
    type_seance = jeudi_type
else:
    type_seance = "Muscu"

st.subheader(f"üìç {jour} ‚Äî {phase} ‚Äî {type_seance}")

# ---------- TABS ----------

tab_seance, tab_tests = st.tabs(["üìù S√©ance", "üß™ Tests max"])

# ---------- S√âANCE ----------

with tab_seance:
    with st.form("formulaire_seance"):
        st.markdown("### üèãÔ∏è Exercices r√©alis√©s")

        def saisie_exercices(exercices):
            resultats = []
            for exo in exercices:
                reps = st.text_input(f"{exo} ‚Äì R√©p√©titions :", key=f"reps_{exo}")
                resultats.append(f"{exo} ({reps})" if reps else exo)
            return resultats

        exercices_reps = []
        autres_exos = ""

        if jour == "Lundi":
            selection = st.multiselect("Exos muscu", EXOS_MUSCU)
            exercices_reps = saisie_exercices(selection)

        elif jour in ["Mardi", "Jeudi"]:
            choix = st.radio("Type de s√©ance :", ["Pr√©pa physique", "Technique", "Les deux"])
            options = []
            if choix in ["Pr√©pa physique", "Les deux"]:
                options += EXOS_PREPA
            if choix in ["Technique", "Les deux"]:
                options += EXOS_TECH
            selection = st.multiselect("Exercices :", options)
            exercices_reps = saisie_exercices(selection)

        else:
            autres_exos = st.text_area("Exercices r√©alis√©s (libre)")

        st.markdown("### üí¨ Ressenti & r√©cup√©ration")
        douleur = st.radio("Douleur ressentie :", ["Aucune", "Musculaire", "Articulaire"])
        zone_douleur = st.text_input("Zone de douleur :", disabled=(douleur == "Aucune"))
        sommeil = st.slider("üåô Sommeil (0 = tr√®s mauvais, 10 = excellent)", 0, 10, 5)
        hydratation = st.slider("üíß Hydratation (0 √† 10)", 0, 10, 5)
        nutrition = st.slider("üçé Nutrition (0 √† 10)", 0, 10, 5)
        rpe = st.slider("üî• Intensit√© ressentie (RPE)", 1, 10, 7)
        fatigue = st.slider("üò¥ Fatigue g√©n√©rale (1 = repos√©, 10 = √©puis√©)", 1, 10, 5)
        notes = st.text_area("Remarques compl√©mentaires")

        submit = st.form_submit_button("üíæ Enregistrer la s√©ance")

        if submit:
            exos_final = "; ".join(exercices_reps) if exercices_reps else autres_exos
            if "data" not in st.session_state:
                st.session_state.data = []

            st.session_state.data.append({
                "Date": selected_date.strftime("%Y-%m-%d"),
                "Jour": jour,
                "Phase": phase,
                "Type": type_seance,
                "Exercices": exos_final,
                "Douleur": douleur,
                "Zone douleur": zone_douleur,
                "Sommeil": sommeil,
                "Hydratation": hydratation,
                "Nutrition": nutrition,
                "RPE": rpe,
                "Fatigue": fatigue,
                "Notes": notes
            })

            st.success("S√©ance enregistr√©e avec succ√®s ‚úÖ")

# ---------- TESTS ----------

with tab_tests:
    st.markdown("### üß™ Tests de performance")
    tests = {}

    def saisir_test(label):
        return st.number_input(f"{label} :", min_value=0.0, step=0.1)

    if jour == "Lundi":
        tests_choisis = st.multiselect("Tests muscu", TESTS_MAX_MUSCU)
        for test in tests_choisis:
            tests[test] = saisir_test(test)

    if jour in ["Mardi", "Jeudi"]:
        tests_choisis = st.multiselect("Tests explosivit√©", TESTS_MAX_JAVELOT)
        for test in tests_choisis:
            tests[test] = saisir_test(test)

    if st.checkbox("Inclure saut en hauteur sans √©lan"):
        tests[TEST_SAUT_HAUTEUR] = saisir_test(TEST_SAUT_HAUTEUR)

    if st.button("üíæ Enregistrer les tests"):
        if "data" not in st.session_state:
            st.session_state.data = []

        enregistrement = {
            "Date": selected_date.strftime("%Y-%m-%d"),
            "Jour": jour,
            "Phase": phase,
            "Type": type_seance
        }
        enregistrement.update(tests)
        st.session_state.data.append(enregistrement)
        st.success("Tests enregistr√©s ‚úÖ")

# ---------- EXPORT ----------

if "data" in st.session_state and st.session_state.data:
    df = pd.DataFrame(st.session_state.data)
    st.subheader("üìä Historique")
    st.dataframe(df)

    st.download_button(
        "‚¨áÔ∏è T√©l√©charger l'historique (.xlsx)",
        data=df.to_excel(index=False),
        file_name="carnet_suivi.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
