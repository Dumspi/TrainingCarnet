import streamlit as st
import pandas as pd
from datetime import date

# ------------------- PARAM√àTRES FIXES -------------------

PHASES = [
    ("Pr√©pa 1", date(2025, 9, 1), date(2025, 12, 31), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition janvier", date(2026, 1, 1), date(2026, 1, 31), "PPG/Technique", "Technique"),
    ("Comp√©tition f√©vrier", date(2026, 2, 1), date(2026, 2, 28), "Technique", "Technique"),
    ("Pr√©pa 2", date(2026, 3, 1), date(2026, 4, 15), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition avril-mai", date(2026, 4, 16), date(2026, 5, 15), "PPG/Technique", "Technique"),
    ("Comp√©tition mai-juillet", date(2026, 5, 16), date(2026, 7, 15), "Technique", "Technique"),
    ("Repos ao√ªt", date(2026, 8, 1), date(2026, 8, 31), "Repos", "Repos"),
]

JOURS = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi"]

# Exercices d√©finis
EXOS_MUSCU = ["√âpaul√©", "Arrach√©", "Soulev√© de terre", "Squat", "Pull over"]
EXOS_PP_GTECH = ["Ischio", "Adducteur", "Lombaire"]  # √† adapter si besoin

# Tests max par jour
TESTS_MAX_MUSCU = EXOS_MUSCU.copy()
TESTS_MAX_JAVELOT = [
    "Saut en longueur sans √©lan",
    "√âjection lancer de poids 4kg avant",
    "√âjection lancer de poids 4kg arri√®re",
    "Lancer m√©decine ball 4kg"
]

TEST_SAUT_HAUTEUR = "Saut en hauteur sans √©lan"


# ------------------- FONCTIONS -------------------

def get_phase(current_date):
    for phase, start, end, mardi, jeudi in PHASES:
        if start <= current_date <= end:
            return phase, mardi, jeudi
    return "Hors phase", "Repos", "Repos"


# ------------------- INTERFACE -------------------

st.title("üìò Carnet de suivi d'entra√Ænement - Javelot")

selected_date = st.date_input("üìÖ Choisis la date de la s√©ance :", date.today())

weekday = selected_date.weekday()
if weekday > 4:
    st.warning("Pas de s√©ance pr√©vue ce jour-l√† (week-end).")
    st.stop()

jour = JOURS[weekday]
phase, mardi_type, jeudi_type = get_phase(selected_date)

if jour == "Lundi":
    type_seance = "Muscu"
elif jour == "Mardi":
    type_seance = mardi_type
elif jour == "Mercredi":
    type_seance = "Gym/Muscu/Mobilit√©"
elif jour == "Jeudi":
    type_seance = jeudi_type
else:
    type_seance = "Muscu"

st.subheader(f"üìç {jour} ‚Äî {phase} ‚Äî {type_seance}")

# Onglets pour saisie s√©ance et tests max
tab_seance, tab_tests = st.tabs(["S√©ance", "Tests max"])

with tab_seance:
    with st.form("formulaire_seance"):
        # Douleur
        st.markdown("### ü©ª Douleur")
        douleur_type = st.radio("Type de douleur", ["Aucune", "Musculaire", "Articulaire"], index=0)
        douleur_zone = st.text_input("Zone de douleur (si applicable)", disabled=douleur_type == "Aucune")

        # R√©cup√©ration
        st.markdown("### üåô R√©cup√©ration")
        sommeil = st.slider("Qualit√© du sommeil (0 = tr√®s mauvais, 10 = excellent)", 0, 10, 5)
        hydratation = st.slider("Hydratation (0 = d√©shydrat√©, 10 = optimal)", 0, 10, 5)
        nutrition = st.slider("Nutrition (0 = mauvaise, 10 = parfaite)", 0, 10, 5)

        # Fatigue et intensit√©
        rpe = st.slider("RPE / Intensit√© ressentie", 1, 10, 7)
        fatigue = st.slider("Fatigue g√©n√©rale (1 repos√© ‚Äî 10 cram√©)", 1, 10, 5)

        # Exercices selon jour
        st.markdown("### üèãÔ∏è Exercices r√©alis√©s")

        def input_reps_for_exos(exos):
            exos_reps = []
            for exo in exos:
                reps = st.text_input(f"R√©p√©titions pour {exo} (ex: 5x5, 3x10)", key=f"reps_{exo}")
                exos_reps.append(f"{exo} ({reps})" if reps else exo)
            return exos_reps

        exercices_selectionnes = []
        exercices_reps = []
        exercices_libres = ""

        if jour == "Lundi":
            exercices_selectionnes = st.multiselect("S√©lectionne les exercices muscu effectu√©s", EXOS_MUSCU)
            exercices_reps = input_reps_for_exos(exercices_selectionnes)

        elif jour in ["Mardi", "Jeudi"]:
            exercices_selectionnes = st.multiselect("S√©lectionne les exercices renforcement / technique", EXOS_PP_GTECH)
            exercices_reps = input_reps_for_exos(exercices_selectionnes)

        exercices_libres = st.text_area("Autres exercices / pr√©cisions")

        # Notes g√©n√©rales
        notes = st.text_area("Remarques / sensations")

        submitted = st.form_submit_button("üíæ Enregistrer la s√©ance")

        if submitted:
            exercices_str = ""
            if exercices_reps:
                exercices_str = "; ".join(exercices_reps)
            if exercices_libres:
                exercices_str += (" | " if exercices_str else "") + exercices_libres

            if "data" not in st.session_state:
                st.session_state.data = []

            st.session_state.data.append({
                "Date": selected_date.strftime("%Y-%m-%d"),
                "Jour": jour,
                "P√©riode": phase,
                "S√©ance": type_seance,
                "Douleur": douleur_type,
                "Zone douleur": douleur_zone,
                "Sommeil": sommeil,
                "Hydratation": hydratation,
                "Nutrition": nutrition,
                "RPE": rpe,
                "Fatigue": fatigue,
                "Exercices": exercices_str,
                "Notes": notes
            })

            st.success("S√©ance enregistr√©e !")

with tab_tests:
    st.markdown(f"### Tests max du jour ({jour})")

    tests_resultats = {}

    def input_test_result(test_name):
        return st.number_input(f"R√©sultat test max - {test_name}", min_value=0.0, step=0.1, format="%.2f")

    # Tests max muscu lundi
    if jour == "Lundi":
        tests_selectionnes = st.multiselect("Choisis les tests max muscu", TESTS_MAX_MUSCU)
        for test in tests_selectionnes:
            tests_resultats[test] = input_test_result(test)

    # Tests max mardi et jeudi
    if jour in ["Mardi", "Jeudi"]:
        tests_selectionnes = st.multiselect("Choisis les tests max javelot / explosivit√©", TESTS_MAX_JAVELOT)
        for test in tests_selectionnes:
            tests_resultats[test] = input_test_result(test)

    # Test max quotidien saut en hauteur
    if st.checkbox(f"Ajouter le test max quotidien : {TEST_SAUT_HAUTEUR} ?"):
        tests_resultats[TEST_SAUT_HAUTEUR] = input_test_result(TEST_SAUT_HAUTEUR)

    if st.button("üíæ Enregistrer les tests max"):
        if "data" not in st.session_state:
            st.session_state.data = []
        # Enregistrer les tests max avec date/jour/phase/s√©ance
        entry = {
            "Date": selected_date.strftime("%Y-%m-%d"),
            "Jour": jour,
            "P√©riode": phase,
            "S√©ance": type_seance,
        }
        entry.update(tests_resultats)

        st.session_state.data.append(entry)
        st.success("Tests max enregistr√©s !")

# ------------------- TABLEAU + EXPORT -------------------

if "data" in st.session_state and st.session_state.data:
    df = pd.DataFrame(st.session_state.data)
    st.subheader("üìä Historique")
    st.dataframe(df)

    st.download_button("‚¨áÔ∏è T√©l√©charger en Excel",
                       data=df.to_excel(index=False),
                       file_name="carnet_suivi.xlsx",
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
