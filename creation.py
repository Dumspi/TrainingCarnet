import streamlit as st
import pandas as pd
from datetime import date

# ---------- PARAM√àTRES ----------

PHASES = [
    ("Pr√©pa 1", date(2025, 9, 1), date(2025, 12, 31), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition janvier", date(2026, 1, 1), date(2026, 1, 31), "PPG/Technique", "Technique"),
    ("Comp√©tition f√©vrier", date(2026, 2, 1), date(2026, 2, 28), "Technique", "Technique"),
    ("Pr√©pa 2", date(2026, 3, 1), date(2026, 4, 15), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition avril-mai", date(2026, 4, 16), date(2026, 5, 15), "PPG/Technique", "Technique"),
    ("Comp√©tition mai-juillet", date(2026, 5, 16), date(2026, 7, 15), "Technique", "Technique"),
]

JOURS = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi"]

EXOS_MUSCU = [
    "√âpaul√©", "√âpaul√© avec bandes", "Arrach√©", "Arrach√© avec bandes", "Arrach√© force",
    "Squat", "Squat avec ceinture", "Demi-squat", "Demi-squat avec ceintures", "Pull over avec mouvement du bassin",
    "Pull over avec halt√®re", "D√©velopp√© couch√© strict", "D√©velopp√© couch√© avec mouvement du bassin",
    "Renfo ischios", "Renfo adducteurs", "Tirage nuque", "Tirage rowing", "Abdos",
    "Exos lombaires", "Renfo cheville", "Dips", "V√©lo", "Rowing machine", "Lancer de medecine ball", "poulie javelot"
]

EXOS_PREPA = ["Medecine ball", " S√©rie passages de haies", "S√©rie de medecine ball JB", "Gainage", "s√©ries exos javelot avec barre olympique"]
EXOS_TECH = ["Lancers de balles 400g", "Lancers de balles 500g", "Lancers de balles 600g", "Lancers de balles 700g", 
             "Lancers de balles 800g", "Lancers de balles 900g", "Lancers de balles 1Kg", "Lancers de balles 1Kg200", 
             "Lancers de balles 1Kg500", "Lancers de balles 2Kg", "Courses d‚Äô√©lan", "Courses d'√©lan avec lattes", "S√©rie de courses d'√©lan Yann", 
             "Lancers de javelots"]

TESTS_MAX_MUSCU = EXOS_MUSCU
TESTS_MAX_JAVELOT = [
    "Saut en longueur sans √©lan", "√âjection lancer de poids 4kg avant",
    "√âjection lancer de poids 4kg arri√®re", "Lancer m√©decine ball 4kg"
]
TEST_SAUT_HAUTEUR = "Saut en hauteur sans √©lan"

ZONES_DOULEUR = [
    "√âpaule droite", "√âpaule gauche", "Coude droit", "Coude gauche", "Poignet droit", "Poignet gauche",
    "Dos haut", "Bas du dos", "Hanche droite", "Hanche gauche", "Genou droit", "Genou gauche",
    "Cheville droite", "Cheville gauche", "Cuisses", "Ischio-jambiers", "Mollets"
]

# ---------- FONCTIONS ----------

def get_phase(current_date):
    for phase, start, end, mardi, jeudi in PHASES:
        if start <= current_date <= end:
            return phase, mardi, jeudi
    return "", "PPG/Technique", "PPG/Technique"

# ---------- INTERFACE ----------

st.set_page_config(page_title="Carnet Javelot", layout="centered")
st.title("üìò Carnet de suivi - Javelot")

selected_date = st.date_input("üìÖ Choisis la date :", date.today())
if not isinstance(selected_date, date):
    st.error("La date s√©lectionn√©e est invalide.")
    st.stop()

weekday = selected_date.weekday()
if weekday > 4:
    st.warning("Aucune s√©ance pr√©vue le week-end.")
    st.stop()

jour = JOURS[weekday]
phase, mardi_type, jeudi_type = get_phase(selected_date)
type_seance = "Muscu" if jour in ["Lundi", "Mercredi", "Vendredi"] else (mardi_type if jour == "Mardi" else jeudi_type)

st.subheader(f"üìç {jour} ‚Äî {phase} ‚Äî {type_seance}")

# ---------- ONGLETS ----------
tab_seance, tab_douleur, tab_tests = st.tabs(["üìù S√©ance", "‚ö†Ô∏è Douleur", "üß™ Tests max"])

# ---------- ONGLET S√âANCE ----------

with tab_seance:
              # üîÅ EN DEHORS DU FORMULAIRE pour garder s√©lection r√©active
selection = []
if jour in ["Lundi", "Mercredi", "Vendredi"]:
    selection = st.multiselect("Exercices muscu r√©alis√©s :", EXOS_MUSCU)

with st.form("formulaire_seance"):
    exercices_reps = []

    if jour in ["Lundi", "Mercredi", "Vendredi"]:
        exos_details = {}
        for exo in selection:
            st.markdown(f"**{exo}**")
            col1, col2, col3 = st.columns(3)
            with col1:
                charge = st.number_input(f"Charge (kg) pour {exo}", min_value=0.0, step=0.5, key=f"charge_{exo}")
            with col2:
                reps = st.number_input(f"R√©p√©titions pour {exo}", min_value=0, step=1, key=f"reps_{exo}")
            with col3:
                series = st.number_input(f"S√©ries pour {exo}", min_value=0, step=1, key=f"series_{exo}")
            exos_details[exo] = {
                "charge": charge,
                "repetitions": reps,
                "series": series
            }

        for exo, vals in exos_details.items():
            exercices_reps.append(f"{exo} ‚Äì {vals['charge']} kg x {vals['repetitions']} reps x {vals['series']} s√©ries")

    elif jour in ["Mardi", "Jeudi"]:
        st.markdown("#### Pr√©paration Physique")
        prepa_selection = st.multiselect("Exercices pr√©pa physique :", EXOS_PREPA, key="prepa_exos")
        prepa_comment = st.text_area("Commentaires pr√©pa physique :", key="prepa_comment")

        st.markdown("#### Technique")
        tech_selection = st.multiselect("Exercices technique :", EXOS_TECH, key="tech_exos")
        tech_comment = st.text_area("Commentaires technique :", key="tech_comment")

        exercices_reps = prepa_selection + tech_selection

    else:
        autres_exos = st.text_area("Exercices r√©alis√©s (libre)")

    # Autres infos g√©n√©rales
    sommeil = st.slider("üåô Sommeil (0 = tr√®s mauvais, 10 = excellent)", 0, 10, 5)
    hydratation = st.slider("üíß Hydratation (0 √† 10)", 0, 10, 5)
    nutrition = st.slider("üçé Nutrition (0 √† 10)", 0, 10, 5)
    rpe = st.slider("üî• Intensit√© ressentie (RPE)", 1, 10, 7)
    fatigue = st.slider("üò¥ Fatigue g√©n√©rale (1 = repos√©, 10 = √©puis√©)", 1, 10, 5)
    notes = st.text_area("Remarques compl√©mentaires")

    submit = st.form_submit_button("üíæ Enregistrer la s√©ance")

    if submit:
        exos_final = "; ".join(exercices_reps) if exercices_reps else autres_exos

        if jour in ["Mardi", "Jeudi"]:
            if prepa_comment:
                exos_final += f"\nPr√©pa physique ‚Äì Commentaires : {prepa_comment}"
            if tech_comment:
                exos_final += f"\nTechnique ‚Äì Commentaires : {tech_comment}"

        if "data" not in st.session_state:
            st.session_state.data = []

        st.session_state.data.append({
            "Date": selected_date.strftime("%Y-%m-%d"),
            "Jour": jour,
            "Phase": phase,
            "Type": type_seance,
            "Exercices": exos_final,
            "Sommeil": sommeil,
            "Hydratation": hydratation,
            "Nutrition": nutrition,
            "RPE": rpe,
            "Fatigue": fatigue,
            "Notes": notes
        })

        st.success("S√©ance enregistr√©e avec succ√®s ‚úÖ")

# ---------- ONGLET DOULEUR ----------
with tab_douleur:
    with st.form("formulaire_douleur"):
        st.markdown("### ‚ö†Ô∏è Douleur")

        type_douleur = st.selectbox("Type de douleur :", ["Aucune", "Musculaire", "Articulaire", "Tendineuse"], key="type_douleur")

        zones_selectionnees = []
        autre_zone = ""

        if type_douleur != "Aucune":
            zones_selectionnees = st.multiselect("Zones concern√©es :", ZONES_DOULEUR, key="zones_douleur")
            autre_zone = st.text_input("Autre zone non list√©e :", key="autre_zone")

        zone_douleur_finale = ", ".join(zones_selectionnees)
        if autre_zone.strip():
            zone_douleur_finale += (", " if zone_douleur_finale else "") + autre_zone.strip()

        commentaire_douleur = st.text_area("Commentaires douleur / sensations")

        submit_douleur = st.form_submit_button("üíæ Enregistrer la douleur")

        if submit_douleur:
            if "data" not in st.session_state:
                st.session_state.data = []

            st.session_state.data.append({
                "Date": selected_date.strftime("%Y-%m-%d"),
                "Jour": jour,
                "Phase": phase,
                "Type": type_seance,
                "Douleur": type_douleur,
                "Zones douleur": zone_douleur_finale,
                "Commentaire douleur": commentaire_douleur
            })

            st.success("Douleur enregistr√©e ‚úÖ")

# ---------- ONGLET TESTS ----------
with tab_tests:
    st.markdown("### üß™ Tests de performance")
    tests = {}

    def saisir_test(label):
        return st.number_input(f"{label} :", min_value=0.0, step=0.1, key=f"test_{label}")

    if jour in ["Lundi", "Mercredi", "Vendredi"]:
        tests_choisis = st.multiselect("Tests muscu", TESTS_MAX_MUSCU)
        for test in tests_choisis:
            tests[test] = saisir_test(test)

    if jour in ["Mardi", "Jeudi"]:
        tests_choisis = st.multiselect("Tests explosivit√©", TESTS_MAX_JAVELOT)
        for test in tests_choisis:
            tests[test] = saisir_test(test)

    if st.checkbox("Inclure saut en hauteur sans √©lan"):
        tests[TEST_SAUT_HAUTEUR] = saisir_test(TEST_SAUT_HAUTEUR)

    if st.button("üíæ Enregistrer les tests"):
        if "data" not in st.session_state:
            st.session_state.data = []

        st.session_state.data.append({
            "Date": selected_date.strftime("%Y-%m-%d"),
            "Jour": jour,
            "Phase": phase,
            "Type": type_seance,
            "Tests": tests
        })
        st.success("Tests enregistr√©s ‚úÖ")

# ---------- AFFICHAGE DONN√âES ----------
if "data" in st.session_state and st.session_state.data:
    st.markdown("## üìä Donn√©es enregistr√©es")
    df = pd.DataFrame(st.session_state.data)
    st.dataframe(df)
