import streamlit as st
import pandas as pd
from datetime import date

# ---------- PARAM√àTRES ----------

PHASES = [
    ("Pr√©pa 1", date(2025, 9, 1), date(2025, 12, 31), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition janvier", date(2026, 1, 1), date(2026, 1, 31), "PPG/Technique", "Technique"),
    ("Comp√©tition f√©vrier", date(2026, 2, 1), date(2026, 2, 28), "Technique", "Technique"),
    ("Pr√©pa 2", date(2026, 3, 1), date(2026, 4, 15), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition avril-mai", date(2026, 4, 16), date(2026, 5, 15), "PPG/Technique", "Technique"),
    ("Comp√©tition mai-juillet", date(2026, 5, 16), date(2026, 7, 15), "Technique", "Technique"),
]

JOURS = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi"]

EXOS_MUSCU = [
    "√âpaul√©", "√âpaul√© avec bandes", "Arrach√©", "Arrach√© avec bandes", "Arrach√© force",
    "Squat", "Squat avec ceinture", "Demi-squat", "Pull over avec mouvement du bassin",
    "Pull over avec halt√®re", "D√©velopp√© couch√© strict", "D√©velopp√© couch√© avec mouvement du bassin",
    "Renfo ischios", "Renfo adducteurs", "Tirage nuque", "Tirage rowing", "Abdos",
    "Exos lombaires", "Renfo cheville", "Dips", "V√©lo", "Rowing machine", "Lancer de m√©decine ball"
]

EXOS_PREPA = ["M√©decine ball", "Passage de haies", "S√©rie de m√©decine ball JB", "Gainage"]
EXOS_TECH = ["Lancers de balles", "Courses d‚Äô√©lan", "Point technique pr√©cis", "Lancers de javelots"]

ZONES_DOULEUR = [
    "√âpaule droite", "√âpaule gauche", "Coude droit", "Coude gauche", "Poignet droit", "Poignet gauche",
    "Dos haut", "Bas du dos", "Hanche droite", "Hanche gauche", "Genou droit", "Genou gauche",
    "Cheville droite", "Cheville gauche", "Cuisses", "Ischio-jambiers", "Mollets"
]

# ---------- FONCTIONS ----------

def get_phase(current_date):
    for phase, start, end, mardi, jeudi in PHASES:
        if start <= current_date <= end:
            return phase, mardi, jeudi
    return "", "PPG/Technique", "PPG/Technique"

# ---------- INTERFACE ----------

st.set_page_config(page_title="Carnet Javelot", layout="centered")
st.title("üìò Carnet de suivi - Javelot")

selected_date = st.date_input("üìÖ Choisis la date :", date.today())
if not isinstance(selected_date, date):
    st.error("La date s√©lectionn√©e est invalide.")
    st.stop()

weekday = selected_date.weekday()
if weekday > 4:
    st.warning("Aucune s√©ance pr√©vue le week-end.")
    st.stop()

jour = JOURS[weekday]
phase, mardi_type, jeudi_type = get_phase(selected_date)

type_seance = "Muscu" if jour in ["Lundi", "Mercredi", "Vendredi"] else (mardi_type if jour == "Mardi" else jeudi_type)

st.subheader(f"üìç {jour} ‚Äî {phase} ‚Äî {type_seance}")

# ---------- SAISIE MUSCU ----------
if type_seance == "Muscu":
    with st.form("form_muscu"):
        st.markdown("### üèãÔ∏è Exercices de musculation")
        selection = st.multiselect("Exercices effectu√©s :", EXOS_MUSCU)
        exercices_reps = []

        for exo in selection:
            col1, col2, col3 = st.columns([3, 1, 1])
            with col1:
                st.markdown(f"**{exo}**")
            with col2:
                charge = st.number_input(f"Charge ({exo})", min_value=0.0, step=2.5, key=f"charge_{exo}")
            with col3:
                reps = st.number_input(f"R√©p√©titions ({exo})", min_value=0, step=1, key=f"reps_{exo}")
            exercices_reps.append(f"{exo} ‚Äì {charge} kg x {reps} reps")

        sommeil = st.slider("üåô Sommeil (0 = tr√®s mauvais, 10 = excellent)", 0, 10, 5)
        hydratation = st.slider("üíß Hydratation (0 √† 10)", 0, 10, 5)
        nutrition = st.slider("üçé Nutrition (0 √† 10)", 0, 10, 5)
        rpe = st.slider("üî• Intensit√© ressentie (RPE)", 1, 10, 7)
        fatigue = st.slider("üò¥ Fatigue g√©n√©rale (1 = repos√©, 10 = √©puis√©)", 1, 10, 5)
        notes = st.text_area("Remarques compl√©mentaires")

        submit = st.form_submit_button("üíæ Enregistrer la s√©ance")

        if submit:
            if "data" not in st.session_state:
                st.session_state.data = []

            st.session_state.data.append({
                "Date": selected_date.strftime("%Y-%m-%d"),
                "Jour": jour,
                "Phase": phase,
                "Type": type_seance,
                "Exercices": "; ".join(exercices_reps),
                "Sommeil": sommeil,
                "Hydratation": hydratation,
                "Nutrition": nutrition,
                "RPE": rpe,
                "Fatigue": fatigue,
                "Notes": notes
            })

            st.success("S√©ance enregistr√©e ‚úÖ")

# ---------- ONGLET DOULEUR ----------
st.markdown("### ‚ö†Ô∏è Douleur")
with st.form("formulaire_douleur"):
    type_douleur = st.selectbox("Type de douleur :", ["Aucune", "Musculaire", "Articulaire", "Tendineuse"], key="type_douleur")

    zones_selectionnees = []
    autre_zone = ""

    if type_douleur != "Aucune":
        zones_selectionnees = st.multiselect("Zones concern√©es :", ZONES_DOULEUR, key="zones_douleur")
        autre_zone = st.text_input("Autre zone non list√©e :", key="autre_zone")

    zone_douleur_finale = ", ".join(zones_selectionnees)
    if autre_zone.strip():
        zone_douleur_finale += (", " if zone_douleur_finale else "") + autre_zone.strip()

    commentaire_douleur = st.text_area("Commentaires douleur / sensations")

    submit_douleur = st.form_submit_button("üíæ Enregistrer la douleur")

    if submit_douleur:
        if "data" not in st.session_state:
            st.session_state.data = []

        st.session_state.data.append({
            "Date": selected_date.strftime("%Y-%m-%d"),
            "Jour": jour,
            "Phase": phase,
            "Type": type_seance,
            "Douleur": type_douleur,
            "Zones douleur": zone_douleur_finale,
            "Commentaire douleur": commentaire_douleur
        })

        st.success("Douleur enregistr√©e ‚úÖ")

# ---------- EXPORT ----------
if "data" in st.session_state and st.session_state.data:
    df = pd.DataFrame(st.session_state.data)
    st.subheader("üìä Historique")
    st.dataframe(df)

    st.download_button(
        "‚¨áÔ∏è T√©l√©charger l'historique (.xlsx)",
        data=df.to_excel(index=False),
        file_name="carnet_suivi.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
