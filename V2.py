import streamlit as st
import pandas as pd
from datetime import date
import gspread
from google.oauth2.service_account import Credentials

# ---------- CONFIG GOOGLE SHEETS ----------
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
SHEET_ID = '1JrfYOXXajQFjl_wMqHpM4qJfBkgZiUO2VtTiPuwhmEk'
SHEET_NAME = 'Feuille 1'

@st.cache_resource
def get_gsheet_client():
    creds = Credentials.from_service_account_file('credentials.json', scopes=SCOPES)
    client = gspread.authorize(creds)
    return client

def load_sheet(sheet_id, sheet_name):
    client = get_gsheet_client()
    sheet = client.open_by_key(sheet_id).worksheet(sheet_name)
    data = sheet.get_all_records()
    df = pd.DataFrame(data)
    return df, sheet

def append_row_to_sheet(sheet, row):
    if not sheet.get_all_values():
        headers = ["Date", "Jour", "Phase", "Type", "Exercices", "Sommeil", "Hydratation", "Nutrition", "RPE", "Fatigue", "Notes", "Athl√®te"]
        sheet.append_row(headers)
    sheet.append_row(row)

# ---------- PARAM√àTRES ----------
ATHLETES = ["Joffrey", "Marie", "Dorine", "Fabien", "Yann", "Lucile", "Arthur", "Baptiste"]

PHASES = [
    ("Pr√©pa 1", date(2025, 9, 1), date(2025, 12, 31), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition janvier", date(2026, 1, 1), date(2026, 1, 31), "PPG/Technique", "Technique"),
    ("Comp√©tition f√©vrier", date(2026, 2, 1), date(2026, 2, 28), "Technique", "Technique"),
    ("Pr√©pa 2", date(2026, 3, 1), date(2026, 4, 15), "PPG/Technique", "PPG/Technique"),
    ("Pr√©-comp√©tition avril-mai", date(2026, 4, 16), date(2026, 5, 15), "PPG/Technique", "Technique"),
    ("Comp√©tition mai-juillet", date(2026, 5, 16), date(2026, 7, 15), "Technique", "Technique"),
]

JOURS = ["Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi"]

EXOS_MUSCU = [
    "√âpaul√©", "√âpaul√© avec bandes", "Arrach√©", "Arrach√© avec bandes", "Arrach√© force",
    "Squat", "Squat avec ceinture", "Demi-squat", "Pull over avec mouvement du bassin",
    "Pull over avec halt√®re", "D√©velopp√© couch√© strict", "D√©velopp√© couch√© avec mouvement du bassin",
    "Renfo ischios", "Renfo adducteurs", "Tirage nuque", "Tirage rowing", "Abdos",
    "Exos lombaires", "Renfo cheville", "Dips", "V√©lo", "Rowing machine", "Lancer de medecine ball"
]

EXOS_PREPA = ["M√©decine ball", "Passage de haies", "S√©rie de m√©decine ball JB", "Gainage"]
EXOS_TECH = ["Lancers de balles", "Courses d‚Äô√©lan", "Point technique pr√©cis", "Lancers de javelots"]

ZONES_DOULEUR = [
    "√âpaule droite", "√âpaule gauche", "Coude droit", "Coude gauche", "Poignet droit", "Poignet gauche",
    "Dos haut", "Bas du dos", "Hanche droite", "Hanche gauche", "Genou droit", "Genou gauche",
    "Cheville droite", "Cheville gauche", "Cuisses", "Ischio-jambiers", "Mollets"
]

def get_phase(current_date):
    for phase, start, end, mardi, jeudi in PHASES:
        if start <= current_date <= end:
            return phase, mardi, jeudi
    return "", "PPG/Technique", "PPG/Technique"

# ---------- INTERFACE ----------
st.set_page_config(page_title="Carnet Javelot", layout="centered")
st.sidebar.title("üë§ S√©lection du profil")
athlete = st.sidebar.selectbox("S√©lectionne l'athl√®te :", ATHLETES, key="select_athlete")

st.title("üìò Carnet de suivi - Javelot")

selected_date = st.date_input("üìÖ Choisis la date :", date.today())
weekday = selected_date.weekday()
if weekday > 4:
    st.warning("Aucune s√©ance pr√©vue le week-end.")
    st.stop()

jour = JOURS[weekday]
phase, mardi_type, jeudi_type = get_phase(selected_date)
type_seance = "Muscu" if jour in ["Lundi", "Mercredi", "Vendredi"] else (mardi_type if jour == "Mardi" else jeudi_type)
st.subheader(f"üìç {jour} ‚Äî {phase} ‚Äî {type_seance}")

# ---------- ONGLET S√âANCE ----------
tab_seance, tab_douleur = st.tabs(["üìù S√©ance", "‚ö†Ô∏è Douleur"])

with tab_seance:
    with st.form("form_seance"):
        exercices = []
        autres_exos = ""
        prepa_comment = ""
        tech_comment = ""

        if jour in ["Lundi", "Mercredi", "Vendredi"]:
            selection = st.multiselect("Exercices muscu :", EXOS_MUSCU)
            for exo in selection:
                col1, col2, col3 = st.columns(3)
                with col1:
                    charge = st.number_input(f"Charge ({exo})", min_value=0.0, step=0.5, key=f"charge_{exo}")
                with col2:
                    reps = st.number_input(f"R√©p√©titions ({exo})", min_value=0, step=1, key=f"reps_{exo}")
                with col3:
                    series = st.number_input(f"S√©ries ({exo})", min_value=0, step=1, key=f"series_{exo}")
                exercices.append(f"{exo} ‚Äì {charge}kg x {reps} x {series}")
        elif jour in ["Mardi", "Jeudi"]:
            prepa = st.multiselect("Pr√©pa physique :", EXOS_PREPA)
            prepa_comment = st.text_area("Commentaire pr√©pa")
            tech = st.multiselect("Technique :", EXOS_TECH)
            tech_comment = st.text_area("Commentaire technique")
            exercices = prepa + tech
        else:
            autres_exos = st.text_area("Autres exercices")

        sommeil = st.slider("üåô Sommeil", 0, 10, 5)
        hydratation = st.slider("üíß Hydratation", 0, 10, 5)
        nutrition = st.slider("üçé Nutrition", 0, 10, 5)
        rpe = st.slider("üî• RPE", 1, 10, 7)
        fatigue = st.slider("üò¥ Fatigue", 1, 10, 5)
        notes = st.text_area("üóíÔ∏è Notes")

        submit = st.form_submit_button("‚úÖ Enregistrer")

        if submit:
            exos_final = "; ".join(exercices) if exercices else autres_exos
            if prepa_comment:
                exos_final += f"\nPr√©pa : {prepa_comment}"
            if tech_comment:
                exos_final += f"\nTechnique : {tech_comment}"

            new_row = [
                selected_date.strftime("%Y-%m-%d"), jour, phase, type_seance, exos_final,
                sommeil, hydratation, nutrition, rpe, fatigue, notes, athlete
            ]
            df, sheet = load_sheet(SHEET_ID, SHEET_NAME)
            append_row_to_sheet(sheet, new_row)
            st.success("S√©ance enregistr√©e ‚úÖ")
            df, _ = load_sheet(SHEET_ID, SHEET_NAME)
            st.dataframe(df)

# ---------- ONGLET DOULEUR ----------
with tab_douleur:
    with st.form("form_douleur"):
        type_douleur = st.selectbox("Type de douleur", ["Aucune", "Musculaire", "Articulaire", "Tendineuse"])
        zones = []
        autre = ""
        if type_douleur != "Aucune":
            zones = st.multiselect("Zones :", ZONES_DOULEUR)
            autre = st.text_input("Autre zone")
        commentaire = st.text_area("Commentaires")

        submit_d = st.form_submit_button("‚úÖ Enregistrer douleur")

        if submit_d:
            zone_str = ", ".join(zones)
            if autre.strip():
                zone_str += (", " if zone_str else "") + autre.strip()
            new_row = [
                selected_date.strftime("%Y-%m-%d"), jour, phase, "Douleur", f"{type_douleur} : {zone_str}",
                "", "", "", "", "", commentaire, athlete
            ]
            df, sheet = load_sheet(SHEET_ID, SHEET_NAME)
            append_row_to_sheet(sheet, new_row)
            st.success("Douleur enregistr√©e ‚úÖ")
            df, _ = load_sheet(SHEET_ID, SHEET_NAME)
            st.dataframe(df)

# ---------- EXPORT CSV ----------
df, _ = load_sheet(SHEET_ID, SHEET_NAME)
csv = df.to_csv(index=False).encode('utf-8')
st.download_button("üìÅ T√©l√©charger CSV", csv, "carnet_javelot.csv", "text/csv")
